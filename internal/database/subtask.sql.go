// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subtask.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const completeSubtask = `-- name: CompleteSubtask :one
UPDATE subtasks
SET status = 'completed', completed_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, title, description, task_id, assigned_to, status, due_date, completed_at, created_at, updated_at
`

func (q *Queries) CompleteSubtask(ctx context.Context, id int64) (Subtask, error) {
	row := q.db.QueryRow(ctx, completeSubtask, id)
	var i Subtask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.TaskID,
		&i.AssignedTo,
		&i.Status,
		&i.DueDate,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countSubtasks = `-- name: CountSubtasks :one
SELECT COUNT(*) FROM subtasks
`

func (q *Queries) CountSubtasks(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSubtasks)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSubtask = `-- name: CreateSubtask :one
INSERT INTO subtasks (title, description, task_id, assigned_to, status, due_date)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, title, description, task_id, assigned_to, status, due_date, completed_at, created_at, updated_at
`

type CreateSubtaskParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	TaskID      pgtype.Int8 `json:"task_id"`
	AssignedTo  pgtype.Int8 `json:"assigned_to"`
	Status      string      `json:"status"`
	DueDate     pgtype.Date `json:"due_date"`
}

func (q *Queries) CreateSubtask(ctx context.Context, arg CreateSubtaskParams) (Subtask, error) {
	row := q.db.QueryRow(ctx, createSubtask,
		arg.Title,
		arg.Description,
		arg.TaskID,
		arg.AssignedTo,
		arg.Status,
		arg.DueDate,
	)
	var i Subtask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.TaskID,
		&i.AssignedTo,
		&i.Status,
		&i.DueDate,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSubtask = `-- name: DeleteSubtask :exec
DELETE FROM subtasks
WHERE id = $1
`

func (q *Queries) DeleteSubtask(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSubtask, id)
	return err
}

const findManySubtasks = `-- name: FindManySubtasks :many
SELECT id, title, description, task_id, assigned_to, status, due_date, completed_at, created_at, updated_at FROM subtasks
`

func (q *Queries) FindManySubtasks(ctx context.Context) ([]Subtask, error) {
	rows, err := q.db.Query(ctx, findManySubtasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subtask
	for rows.Next() {
		var i Subtask
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.TaskID,
			&i.AssignedTo,
			&i.Status,
			&i.DueDate,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManySubtasksWithPagination = `-- name: FindManySubtasksWithPagination :many
SELECT id, title, description, task_id, assigned_to, status, due_date, completed_at, created_at, updated_at FROM subtasks
WHERE id > 0
ORDER BY id
LIMIT $2 OFFSET $1
`

type FindManySubtasksWithPaginationParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) FindManySubtasksWithPagination(ctx context.Context, arg FindManySubtasksWithPaginationParams) ([]Subtask, error) {
	rows, err := q.db.Query(ctx, findManySubtasksWithPagination, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subtask
	for rows.Next() {
		var i Subtask
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.TaskID,
			&i.AssignedTo,
			&i.Status,
			&i.DueDate,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSubtaskById = `-- name: FindSubtaskById :one
SELECT id, title, description, task_id, assigned_to, status, due_date, completed_at, created_at, updated_at FROM subtasks WHERE id = $1
`

func (q *Queries) FindSubtaskById(ctx context.Context, id int64) (Subtask, error) {
	row := q.db.QueryRow(ctx, findSubtaskById, id)
	var i Subtask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.TaskID,
		&i.AssignedTo,
		&i.Status,
		&i.DueDate,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findSubtasksByAssignedTo = `-- name: FindSubtasksByAssignedTo :many
SELECT id, title, description, task_id, assigned_to, status, due_date, completed_at, created_at, updated_at FROM subtasks WHERE assigned_to = $1
`

func (q *Queries) FindSubtasksByAssignedTo(ctx context.Context, assignedTo pgtype.Int8) ([]Subtask, error) {
	rows, err := q.db.Query(ctx, findSubtasksByAssignedTo, assignedTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subtask
	for rows.Next() {
		var i Subtask
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.TaskID,
			&i.AssignedTo,
			&i.Status,
			&i.DueDate,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSubtasksByStatus = `-- name: FindSubtasksByStatus :many
SELECT id, title, description, task_id, assigned_to, status, due_date, completed_at, created_at, updated_at FROM subtasks WHERE status = $1
`

func (q *Queries) FindSubtasksByStatus(ctx context.Context, status string) ([]Subtask, error) {
	rows, err := q.db.Query(ctx, findSubtasksByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subtask
	for rows.Next() {
		var i Subtask
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.TaskID,
			&i.AssignedTo,
			&i.Status,
			&i.DueDate,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSubtasksByTaskId = `-- name: FindSubtasksByTaskId :many
SELECT id, title, description, task_id, assigned_to, status, due_date, completed_at, created_at, updated_at FROM subtasks WHERE task_id = $1
`

func (q *Queries) FindSubtasksByTaskId(ctx context.Context, taskID pgtype.Int8) ([]Subtask, error) {
	rows, err := q.db.Query(ctx, findSubtasksByTaskId, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subtask
	for rows.Next() {
		var i Subtask
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.TaskID,
			&i.AssignedTo,
			&i.Status,
			&i.DueDate,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubtask = `-- name: UpdateSubtask :one
UPDATE subtasks
SET title = $1, description = $2, task_id = $3, assigned_to = $4,
    status = $5, due_date = $6, updated_at = CURRENT_TIMESTAMP
WHERE id = $7
RETURNING id, title, description, task_id, assigned_to, status, due_date, completed_at, created_at, updated_at
`

type UpdateSubtaskParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	TaskID      pgtype.Int8 `json:"task_id"`
	AssignedTo  pgtype.Int8 `json:"assigned_to"`
	Status      string      `json:"status"`
	DueDate     pgtype.Date `json:"due_date"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateSubtask(ctx context.Context, arg UpdateSubtaskParams) (Subtask, error) {
	row := q.db.QueryRow(ctx, updateSubtask,
		arg.Title,
		arg.Description,
		arg.TaskID,
		arg.AssignedTo,
		arg.Status,
		arg.DueDate,
		arg.ID,
	)
	var i Subtask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.TaskID,
		&i.AssignedTo,
		&i.Status,
		&i.DueDate,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
