// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: task.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const completeTask = `-- name: CompleteTask :one
UPDATE tasks
SET status = 'completed', completed_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, title, description, project_id, assigned_to, status, priority, due_date, completed_at, created_at, updated_at
`

func (q *Queries) CompleteTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, completeTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ProjectID,
		&i.AssignedTo,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countTasks = `-- name: CountTasks :one
SELECT COUNT(*) FROM tasks
`

func (q *Queries) CountTasks(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countTasks)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, project_id, assigned_to, status, priority, due_date)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, title, description, project_id, assigned_to, status, priority, due_date, completed_at, created_at, updated_at
`

type CreateTaskParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	ProjectID   pgtype.Int8 `json:"project_id"`
	AssignedTo  pgtype.Int8 `json:"assigned_to"`
	Status      string      `json:"status"`
	Priority    string      `json:"priority"`
	DueDate     pgtype.Date `json:"due_date"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.ProjectID,
		arg.AssignedTo,
		arg.Status,
		arg.Priority,
		arg.DueDate,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ProjectID,
		&i.AssignedTo,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const findManyTasks = `-- name: FindManyTasks :many
SELECT id, title, description, project_id, assigned_to, status, priority, due_date, completed_at, created_at, updated_at FROM tasks
`

func (q *Queries) FindManyTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, findManyTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ProjectID,
			&i.AssignedTo,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyTasksWithPagination = `-- name: FindManyTasksWithPagination :many
SELECT id, title, description, project_id, assigned_to, status, priority, due_date, completed_at, created_at, updated_at FROM tasks
WHERE id > 0
ORDER BY id
LIMIT $2 OFFSET $1
`

type FindManyTasksWithPaginationParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) FindManyTasksWithPagination(ctx context.Context, arg FindManyTasksWithPaginationParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, findManyTasksWithPagination, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ProjectID,
			&i.AssignedTo,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTaskById = `-- name: FindTaskById :one
SELECT id, title, description, project_id, assigned_to, status, priority, due_date, completed_at, created_at, updated_at FROM tasks WHERE id = $1
`

func (q *Queries) FindTaskById(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, findTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ProjectID,
		&i.AssignedTo,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findTasksByAssignedTo = `-- name: FindTasksByAssignedTo :many
SELECT id, title, description, project_id, assigned_to, status, priority, due_date, completed_at, created_at, updated_at FROM tasks WHERE assigned_to = $1
`

func (q *Queries) FindTasksByAssignedTo(ctx context.Context, assignedTo pgtype.Int8) ([]Task, error) {
	rows, err := q.db.Query(ctx, findTasksByAssignedTo, assignedTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ProjectID,
			&i.AssignedTo,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTasksByPriority = `-- name: FindTasksByPriority :many
SELECT id, title, description, project_id, assigned_to, status, priority, due_date, completed_at, created_at, updated_at FROM tasks WHERE priority = $1
`

func (q *Queries) FindTasksByPriority(ctx context.Context, priority string) ([]Task, error) {
	rows, err := q.db.Query(ctx, findTasksByPriority, priority)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ProjectID,
			&i.AssignedTo,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTasksByProjectId = `-- name: FindTasksByProjectId :many
SELECT id, title, description, project_id, assigned_to, status, priority, due_date, completed_at, created_at, updated_at FROM tasks WHERE project_id = $1
`

func (q *Queries) FindTasksByProjectId(ctx context.Context, projectID pgtype.Int8) ([]Task, error) {
	rows, err := q.db.Query(ctx, findTasksByProjectId, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ProjectID,
			&i.AssignedTo,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTasksByStatus = `-- name: FindTasksByStatus :many
SELECT id, title, description, project_id, assigned_to, status, priority, due_date, completed_at, created_at, updated_at FROM tasks WHERE status = $1
`

func (q *Queries) FindTasksByStatus(ctx context.Context, status string) ([]Task, error) {
	rows, err := q.db.Query(ctx, findTasksByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ProjectID,
			&i.AssignedTo,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTasksWithUsersPaginated = `-- name: FindTasksWithUsersPaginated :many
SELECT t.id, t.title, t.description, t.project_id, t.assigned_to, t.status, t.priority, t.due_date, t.completed_at, t.created_at, t.updated_at FROM tasks t
WHERE t.id > 0
ORDER BY t.id
LIMIT $2 OFFSET $1
`

type FindTasksWithUsersPaginatedParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) FindTasksWithUsersPaginated(ctx context.Context, arg FindTasksWithUsersPaginatedParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, findTasksWithUsersPaginated, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ProjectID,
			&i.AssignedTo,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUsersByTaskIds = `-- name: FindUsersByTaskIds :many
SELECT u.id, u.name, u.email, u.password FROM users u
JOIN tasks t ON t.assigned_to = u.id
WHERE t.id IN ($1)
ORDER BY u.id
`

func (q *Queries) FindUsersByTaskIds(ctx context.Context, taskIds []int64) ([]User, error) {
	rows, err := q.db.Query(ctx, findUsersByTaskIds, taskIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET title = $1, description = $2, project_id = $3, assigned_to = $4,
    status = $5, priority = $6, due_date = $7, updated_at = CURRENT_TIMESTAMP
WHERE id = $8
RETURNING id, title, description, project_id, assigned_to, status, priority, due_date, completed_at, created_at, updated_at
`

type UpdateTaskParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	ProjectID   pgtype.Int8 `json:"project_id"`
	AssignedTo  pgtype.Int8 `json:"assigned_to"`
	Status      string      `json:"status"`
	Priority    string      `json:"priority"`
	DueDate     pgtype.Date `json:"due_date"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.ProjectID,
		arg.AssignedTo,
		arg.Status,
		arg.Priority,
		arg.DueDate,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ProjectID,
		&i.AssignedTo,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
