// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProjects = `-- name: CountProjects :one
SELECT COUNT(*)
FROM projects
`

func (q *Queries) CountProjects(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countProjects)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name, description, client_id, status, start_date, end_date)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, description, client_id, status, start_date, end_date, created_at, updated_at
`

type CreateProjectParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	ClientID    pgtype.Int8 `json:"client_id"`
	Status      string      `json:"status"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.Name,
		arg.Description,
		arg.ClientID,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ClientID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserProject = `-- name: CreateUserProject :exec
insert into user_project (user_id, project_id)
values ($1, $2)
`

type CreateUserProjectParams struct {
	UserID    pgtype.Int8 `json:"user_id"`
	ProjectID pgtype.Int8 `json:"project_id"`
}

func (q *Queries) CreateUserProject(ctx context.Context, arg CreateUserProjectParams) error {
	_, err := q.db.Exec(ctx, createUserProject, arg.UserID, arg.ProjectID)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE
FROM projects
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const deleteUserProject = `-- name: DeleteUserProject :exec
delete from user_project
where user_id = $1 and project_id = $2
`

type DeleteUserProjectParams struct {
	UserID    pgtype.Int8 `json:"user_id"`
	ProjectID pgtype.Int8 `json:"project_id"`
}

func (q *Queries) DeleteUserProject(ctx context.Context, arg DeleteUserProjectParams) error {
	_, err := q.db.Exec(ctx, deleteUserProject, arg.UserID, arg.ProjectID)
	return err
}

const finUsersByProject = `-- name: FinUsersByProject :many
select user_id, project_id
from user_project
where project_id = $1
`

func (q *Queries) FinUsersByProject(ctx context.Context, projectID pgtype.Int8) ([]UserProject, error) {
	rows, err := q.db.Query(ctx, finUsersByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserProject
	for rows.Next() {
		var i UserProject
		if err := rows.Scan(&i.UserID, &i.ProjectID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyProjects = `-- name: FindManyProjects :many
SELECT id, name, description, client_id, status, start_date, end_date, created_at, updated_at
FROM projects
`

func (q *Queries) FindManyProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, findManyProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ClientID,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyProjectsWithPagination = `-- name: FindManyProjectsWithPagination :many
SELECT id, name, description, client_id, status, start_date, end_date, created_at, updated_at
FROM projects
WHERE id > 0
ORDER BY id
LIMIT $2 OFFSET $1
`

type FindManyProjectsWithPaginationParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) FindManyProjectsWithPagination(ctx context.Context, arg FindManyProjectsWithPaginationParams) ([]Project, error) {
	rows, err := q.db.Query(ctx, findManyProjectsWithPagination, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ClientID,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProjectById = `-- name: FindProjectById :one
SELECT id, name, description, client_id, status, start_date, end_date, created_at, updated_at
FROM projects
WHERE id = $1
`

func (q *Queries) FindProjectById(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRow(ctx, findProjectById, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ClientID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findProjectsByClientId = `-- name: FindProjectsByClientId :many
SELECT id, name, description, client_id, status, start_date, end_date, created_at, updated_at
FROM projects
WHERE client_id = $1
`

func (q *Queries) FindProjectsByClientId(ctx context.Context, clientID pgtype.Int8) ([]Project, error) {
	rows, err := q.db.Query(ctx, findProjectsByClientId, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ClientID,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProjectsByUser = `-- name: FindProjectsByUser :many
select user_id, project_id
from user_project
where user_id = $1
`

func (q *Queries) FindProjectsByUser(ctx context.Context, userID pgtype.Int8) ([]UserProject, error) {
	rows, err := q.db.Query(ctx, findProjectsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserProject
	for rows.Next() {
		var i UserProject
		if err := rows.Scan(&i.UserID, &i.ProjectID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET name        = $1,
    description = $2,
    client_id   = $3,
    status      = $4,
    start_date  = $5,
    end_date    = $6,
    updated_at  = CURRENT_TIMESTAMP
WHERE id = $7
RETURNING id, name, description, client_id, status, start_date, end_date, created_at, updated_at
`

type UpdateProjectParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	ClientID    pgtype.Int8 `json:"client_id"`
	Status      string      `json:"status"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.Name,
		arg.Description,
		arg.ClientID,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
		arg.ID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ClientID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
