// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into users (name, email, password)
 values ($1, $2,$3) returning id, name, email, password
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const findByEmail = `-- name: FindByEmail :one
select id, name, email, password from users WHERE email = $1 limit 1
`

func (q *Queries) FindByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const findById = `-- name: FindById :one
select id, name, email, password from users where id = $1
`

func (q *Queries) FindById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, findById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const findMany = `-- name: FindMany :many
select id, name, email, password from users
`

func (q *Queries) FindMany(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, findMany)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
