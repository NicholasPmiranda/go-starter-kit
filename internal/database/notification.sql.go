// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notification.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countNotifications = `-- name: CountNotifications :one
SELECT COUNT(*) FROM notifications
`

func (q *Queries) CountNotifications(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countNotifications)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (user_id, title, content, type, notifiable_type, notifiable_id)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, user_id, title, content, type, read, notifiable_type, notifiable_id, created_at, updated_at, read_at
`

type CreateNotificationParams struct {
	UserID         pgtype.Int8 `json:"user_id"`
	Title          string      `json:"title"`
	Content        string      `json:"content"`
	Type           string      `json:"type"`
	NotifiableType string      `json:"notifiable_type"`
	NotifiableID   int64       `json:"notifiable_id"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.Type,
		arg.NotifiableType,
		arg.NotifiableID,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Type,
		&i.Read,
		&i.NotifiableType,
		&i.NotifiableID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReadAt,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteNotification, id)
	return err
}

const findManyNotifications = `-- name: FindManyNotifications :many
SELECT id, user_id, title, content, type, read, notifiable_type, notifiable_id, created_at, updated_at, read_at FROM notifications
`

func (q *Queries) FindManyNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.Query(ctx, findManyNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Type,
			&i.Read,
			&i.NotifiableType,
			&i.NotifiableID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyNotificationsWithPagination = `-- name: FindManyNotificationsWithPagination :many
SELECT id, user_id, title, content, type, read, notifiable_type, notifiable_id, created_at, updated_at, read_at FROM notifications
WHERE id > 0
ORDER BY id
LIMIT $2 OFFSET $1
`

type FindManyNotificationsWithPaginationParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) FindManyNotificationsWithPagination(ctx context.Context, arg FindManyNotificationsWithPaginationParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, findManyNotificationsWithPagination, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Type,
			&i.Read,
			&i.NotifiableType,
			&i.NotifiableID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNotificationById = `-- name: FindNotificationById :one
SELECT id, user_id, title, content, type, read, notifiable_type, notifiable_id, created_at, updated_at, read_at FROM notifications WHERE id = $1
`

func (q *Queries) FindNotificationById(ctx context.Context, id int64) (Notification, error) {
	row := q.db.QueryRow(ctx, findNotificationById, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Type,
		&i.Read,
		&i.NotifiableType,
		&i.NotifiableID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReadAt,
	)
	return i, err
}

const findNotificationsByNotifiable = `-- name: FindNotificationsByNotifiable :many
SELECT id, user_id, title, content, type, read, notifiable_type, notifiable_id, created_at, updated_at, read_at FROM notifications WHERE notifiable_type = $1 AND notifiable_id = $2
`

type FindNotificationsByNotifiableParams struct {
	NotifiableType string `json:"notifiable_type"`
	NotifiableID   int64  `json:"notifiable_id"`
}

func (q *Queries) FindNotificationsByNotifiable(ctx context.Context, arg FindNotificationsByNotifiableParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, findNotificationsByNotifiable, arg.NotifiableType, arg.NotifiableID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Type,
			&i.Read,
			&i.NotifiableType,
			&i.NotifiableID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNotificationsByUserId = `-- name: FindNotificationsByUserId :many
SELECT id, user_id, title, content, type, read, notifiable_type, notifiable_id, created_at, updated_at, read_at FROM notifications WHERE user_id = $1
`

func (q *Queries) FindNotificationsByUserId(ctx context.Context, userID pgtype.Int8) ([]Notification, error) {
	rows, err := q.db.Query(ctx, findNotificationsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Type,
			&i.Read,
			&i.NotifiableType,
			&i.NotifiableID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUnreadNotificationsByUserId = `-- name: FindUnreadNotificationsByUserId :many
SELECT id, user_id, title, content, type, read, notifiable_type, notifiable_id, created_at, updated_at, read_at FROM notifications WHERE user_id = $1 AND read = false
`

func (q *Queries) FindUnreadNotificationsByUserId(ctx context.Context, userID pgtype.Int8) ([]Notification, error) {
	rows, err := q.db.Query(ctx, findUnreadNotificationsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Type,
			&i.Read,
			&i.NotifiableType,
			&i.NotifiableID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAllNotificationsAsRead = `-- name: MarkAllNotificationsAsRead :many
UPDATE notifications
SET read = true, read_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1 AND read = false
RETURNING id, user_id, title, content, type, read, notifiable_type, notifiable_id, created_at, updated_at, read_at
`

func (q *Queries) MarkAllNotificationsAsRead(ctx context.Context, userID pgtype.Int8) ([]Notification, error) {
	rows, err := q.db.Query(ctx, markAllNotificationsAsRead, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Type,
			&i.Read,
			&i.NotifiableType,
			&i.NotifiableID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markNotificationAsRead = `-- name: MarkNotificationAsRead :one
UPDATE notifications
SET read = true, read_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, title, content, type, read, notifiable_type, notifiable_id, created_at, updated_at, read_at
`

func (q *Queries) MarkNotificationAsRead(ctx context.Context, id int64) (Notification, error) {
	row := q.db.QueryRow(ctx, markNotificationAsRead, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Type,
		&i.Read,
		&i.NotifiableType,
		&i.NotifiableID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReadAt,
	)
	return i, err
}

const updateNotification = `-- name: UpdateNotification :one
UPDATE notifications
SET title = $1, content = $2, type = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $4
RETURNING id, user_id, title, content, type, read, notifiable_type, notifiable_id, created_at, updated_at, read_at
`

type UpdateNotificationParams struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	Type    string `json:"type"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, updateNotification,
		arg.Title,
		arg.Content,
		arg.Type,
		arg.ID,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Type,
		&i.Read,
		&i.NotifiableType,
		&i.NotifiableID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReadAt,
	)
	return i, err
}
