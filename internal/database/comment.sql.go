// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: comment.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (content, user_id, commentable_type, commentable_id)
VALUES ($1, $2, $3, $4) RETURNING id, content, user_id, commentable_type, commentable_id, created_at, updated_at
`

type CreateCommentParams struct {
	Content         string      `json:"content"`
	UserID          pgtype.Int8 `json:"user_id"`
	CommentableType string      `json:"commentable_type"`
	CommentableID   int64       `json:"commentable_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.Content,
		arg.UserID,
		arg.CommentableType,
		arg.CommentableID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CommentableType,
		&i.CommentableID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteComment, id)
	return err
}

const findCommentById = `-- name: FindCommentById :one
SELECT id, content, user_id, commentable_type, commentable_id, created_at, updated_at FROM comments WHERE id = $1
`

func (q *Queries) FindCommentById(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRow(ctx, findCommentById, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CommentableType,
		&i.CommentableID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCommentsByCommentable = `-- name: FindCommentsByCommentable :many
SELECT id, content, user_id, commentable_type, commentable_id, created_at, updated_at FROM comments WHERE commentable_type = $1 AND commentable_id = $2
`

type FindCommentsByCommentableParams struct {
	CommentableType string `json:"commentable_type"`
	CommentableID   int64  `json:"commentable_id"`
}

func (q *Queries) FindCommentsByCommentable(ctx context.Context, arg FindCommentsByCommentableParams) ([]Comment, error) {
	rows, err := q.db.Query(ctx, findCommentsByCommentable, arg.CommentableType, arg.CommentableID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.CommentableType,
			&i.CommentableID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCommentsByUserId = `-- name: FindCommentsByUserId :many
SELECT id, content, user_id, commentable_type, commentable_id, created_at, updated_at FROM comments WHERE user_id = $1
`

func (q *Queries) FindCommentsByUserId(ctx context.Context, userID pgtype.Int8) ([]Comment, error) {
	rows, err := q.db.Query(ctx, findCommentsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.CommentableType,
			&i.CommentableID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyComments = `-- name: FindManyComments :many
SELECT id, content, user_id, commentable_type, commentable_id, created_at, updated_at FROM comments
`

func (q *Queries) FindManyComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.Query(ctx, findManyComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.CommentableType,
			&i.CommentableID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET content = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
RETURNING id, content, user_id, commentable_type, commentable_id, created_at, updated_at
`

type UpdateCommentParams struct {
	Content string `json:"content"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, updateComment, arg.Content, arg.ID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CommentableType,
		&i.CommentableID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
