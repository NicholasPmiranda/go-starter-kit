// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: client.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countClients = `-- name: CountClients :one
SELECT COUNT(*) FROM clients
`

func (q *Queries) CountClients(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countClients)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createClient = `-- name: CreateClient :one
INSERT INTO clients (name, email, phone, address)
VALUES ($1, $2, $3, $4) RETURNING id, name, email, phone, address, created_at, updated_at
`

type CreateClientParams struct {
	Name    string      `json:"name"`
	Email   string      `json:"email"`
	Phone   pgtype.Text `json:"phone"`
	Address pgtype.Text `json:"address"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRow(ctx, createClient,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Address,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients
WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteClient, id)
	return err
}

const findClientById = `-- name: FindClientById :one
SELECT id, name, email, phone, address, created_at, updated_at FROM clients WHERE id = $1
`

func (q *Queries) FindClientById(ctx context.Context, id int64) (Client, error) {
	row := q.db.QueryRow(ctx, findClientById, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findManyClients = `-- name: FindManyClients :many
SELECT id, name, email, phone, address, created_at, updated_at FROM clients
`

func (q *Queries) FindManyClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.Query(ctx, findManyClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyClientsWithPagination = `-- name: FindManyClientsWithPagination :many
SELECT id, name, email, phone, address, created_at, updated_at FROM clients
WHERE id > 0
ORDER BY id
LIMIT $2 OFFSET $1
`

type FindManyClientsWithPaginationParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) FindManyClientsWithPagination(ctx context.Context, arg FindManyClientsWithPaginationParams) ([]Client, error) {
	rows, err := q.db.Query(ctx, findManyClientsWithPagination, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE clients
SET name = $1, email = $2, phone = $3, address = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $5
RETURNING id, name, email, phone, address, created_at, updated_at
`

type UpdateClientParams struct {
	Name    string      `json:"name"`
	Email   string      `json:"email"`
	Phone   pgtype.Text `json:"phone"`
	Address pgtype.Text `json:"address"`
	ID      int64       `json:"id"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.db.QueryRow(ctx, updateClient,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.ID,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
